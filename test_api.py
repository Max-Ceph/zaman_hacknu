"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_api.py
"""

import os
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()


def test_zaman_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Zaman Bank API"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö ZAMAN BANK API")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
    api_key = os.getenv("ZAMAN_BANK_API_KEY")
    base_url = os.getenv("ZAMAN_BANK_BASE_URL")

    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
    if api_key:
        api_key = api_key.strip('"').strip("'")
    if base_url:
        base_url = base_url.strip('"').strip("'")

    print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  API Key: {api_key[:20]}... (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)")
    print(f"  Base URL: {base_url}")

    if not api_key or not base_url:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ!")
        return False

    # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    try:
        client = OpenAI(api_key=api_key, base_url=base_url)

        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç
        print("\nüîÑ –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç...")
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç?"}
            ],
            max_tokens=10
        )
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response.choices[0].message.content}")

        # –¢–µ—Å—Ç 2: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏
        print("\nüîÑ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...")
        embedding_response = client.embeddings.create(
            input=["–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞"],
            model="text-embedding-3-small"
        )
        vector_length = len(embedding_response.data[0].embedding)
        print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω (—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {vector_length})")

        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60 + "\n")
        return True

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:")
        print(f"  {str(e)}")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
        print("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env –Ω–µ—Ç –∫–∞–≤—ã—á–µ–∫ –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–π")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL: " + base_url)
        return False


def test_openai_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É OpenAI API (fallback)"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö OPENAI API (FALLBACK)")
    print("=" * 60)

    api_key = os.getenv("OPENAI_API_KEY")

    if not api_key:
        print("\n‚ö† OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç Zaman API)")
        return None

    try:
        client = OpenAI(api_key=api_key)
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}],
            max_tokens=10
        )
        print(f"‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.choices[0].message.content}")
        return True
    except Exception as e:
        print(f"‚ùå OpenAI API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False


if __name__ == "__main__":
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Zaman Bank API
    zaman_works = test_zaman_api()

    # –ï—Å–ª–∏ Zaman –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ–º OpenAI
    if not zaman_works:
        test_openai_api()

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n")