import os
import bcrypt
import certifi
import json
import numpy as np
import pytz
from dotenv import load_dotenv
from flask import Flask, request, render_template, redirect, url_for, session, jsonify
from openai import OpenAI
from pymongo import MongoClient
from datetime import datetime
from bson import ObjectId
from bson.decimal128 import Decimal128
from bson.json_util import dumps
from datetime import datetime, timedelta
import pytz
from bson.decimal128 import Decimal128
from langdetect import detect, DetectorFactory
DetectorFactory.seed = 0

app = Flask(__name__, template_folder="templates", static_folder="static")
app.config['SECRET_KEY'] = 'a-very-secret-key-for-sessions'

load_dotenv(os.path.join(os.path.abspath(os.path.dirname(__file__)), '.env'))

openai_api_key = os.getenv("OPENAI_API_KEY")

if not openai_api_key:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

openai_client = OpenAI(api_key=openai_api_key)
print(f"‚úì OpenAI API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

MONGO_URI = os.getenv("MONGO_URI")
if not MONGO_URI:
    raise ValueError("‚ùå MONGO_URI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

ca = certifi.where()
mongo_client = MongoClient(MONGO_URI, tlsCAFile=ca)
db = mongo_client["E-commerce"]
if "transactions" not in db.list_collection_names():
    db.create_collection("transactions")
    print("‚úì –ö–æ–ª–ª–µ–∫—Ü–∏—è transactions —Å–æ–∑–¥–∞–Ω–∞")

print(f"‚úì MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
print(f"‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: E-commerce")
print(f"‚úì –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!\n")

vector_database_ru = []
vector_database_kk = []


def load_vector_databases():
    global vector_database_ru, vector_database_kk

    try:
        with open("vector_database.json", "r", encoding="utf-8") as f:
            vector_database_ru = json.load(f)
            for item in vector_database_ru:
                item['vector'] = np.array(item['vector'])
        print(f"‚úì –†—É—Å—Å–∫–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(vector_database_ru)}")
    except FileNotFoundError:
        print("‚ö† –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª vector_database.json (RU) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ prepare_data.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.")

    try:
        with open("vector_database_kk.json", "r", encoding="utf-8") as f:
            vector_database_kk = json.load(f)
            for item in vector_database_kk:
                item['vector'] = np.array(item['vector'])
        print(f"‚úì –ö–∞–∑–∞—Ö—Å–∫–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(vector_database_kk)}")
    except FileNotFoundError:
        print("‚ö† –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª vector_database_kk.json (KK) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ prepare_data.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.")


def get_embedding(text, model="text-embedding-3-small"):
    return openai_client.embeddings.create(input=[text], model=model).data[0].embedding


def cosine_similarity(vec1, vec2):
    return np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))


def find_most_relevant_chunk(user_question_vector, top_k=2):
    if not vector_database:
        return []

    similarities = [
        (cosine_similarity(user_question_vector, item['vector']), item['content'], item['source'])
        for item in vector_database
    ]
    similarities.sort(key=lambda x: x[0], reverse=True)
    return [(content, source) for sim, content, source in similarities[:top_k]]


def find_most_relevant_chunk(user_question_vector, vector_db, top_k=2):
    if not vector_db:
        return []

    similarities = [
        (cosine_similarity(user_question_vector, item['vector']), item['content'], item['source'])
        for item in vector_db
    ]
    similarities.sort(key=lambda x: x[0], reverse=True)
    return [(content, source) for sim, content, source in similarities[:top_k]]


def detect_language(text):
    kk_chars = set('”ò”ô–Ü—ñ“¢“£“í“ì“Æ“Ø“∞“±“ö“õ”®”©“∫“ª')

    if any(char in kk_chars for char in text):
        return 'kk'

    ru_markers = [
        '—Ö–æ—á—É', '–Ω—É–∂–Ω–æ', '–Ω—É–∂–µ–Ω', '–Ω—É–∂–Ω–∞', '–º–æ–∂–Ω–æ', '—Å–∫–∞–∂–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏',
        '–æ—Ç–∫—Ä—ã—Ç—å', '–∑–∞–∫—Ä—ã—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å', '–≤–∑—è—Ç—å', '–æ—Ñ–æ—Ä–º–∏—Ç—å',
        '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ', '–∫–æ—Ç–æ—Ä—ã–π', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É',
        '—ç—Ç–æ', '—á—Ç–æ', '–∫–∞–∫', '–º–Ω–µ', '–º–µ–Ω—è', '—Ç–µ–±—è', '–≤–∞—Å',
        '–±–∞–Ω–∫', '—Å—á–µ—Ç', '–∫–∞—Ä—Ç—É', '–∫—Ä–µ–¥–∏—Ç', '–∑–∞–π–º'
    ]

    kk_markers = [
        '“õ–∞–ª–∞–π', '–Ω–µ—à–µ', '“õ–∞–Ω–¥–∞–π', '–º–∞“ì–∞–Ω', '—Å–∞“ì–∞–Ω', '—Å—ñ–∑–≥–µ',
        '–∫–µ—Ä–µ–∫', '—Ç–∏—ñ—Å', '“Ø—à—ñ–Ω', '—Ç—É—Ä–∞–ª—ã', '–∞—Ä“õ—ã–ª—ã', '–±–æ–π—ã–Ω—à–∞',
        '“õ–∞–π–¥–∞', '“õ–∞—à–∞–Ω', '–Ω–µ–≥–µ', '—Å–µ–±–µ–±—ñ',
        '–∞–ª–∞–π—ã–Ω', '–±–µ—Ä–µ–π—ñ–Ω', '–∂–∞—Å–∞–π—ã–Ω', '–∞—à–∞–π—ã–Ω',
        '–±–∞–Ω–∫—Ç–µ', '—à–æ—Ç', '–∞–ª–∞–º—ã–Ω', '“õ–∞—Ä–∂—ã', '–Ω–µ—Å–∏–µ'
    ]

    text_lower = text.lower()

    ru_score = sum(1 for marker in ru_markers if marker in text_lower)
    kk_score = sum(1 for marker in kk_markers if marker in text_lower)

    if ru_score >= 2 and kk_score == 0:
        return 'ru'

    if kk_score >= 1:
        return 'kk'

    if ru_score >= 1:
        return 'ru'

    try:
        detected = detect(text)
        return detected if detected in ['ru', 'kk'] else 'ru'
    except:
        return 'ru'


def detect_intent_to_open_product(message: str, lang: str) -> bool:
    message_lower = message.lower()

    kk_triggers = [
        '–∫–∞—Ä—Ç–∞ –∞—à', '–∫–∞—Ä—Ç–∞ –∞–ª–∞–π—ã–Ω', '–∫–∞—Ä—Ç–∞ –∫–µ—Ä–µ–∫', '–∫–∞—Ä—Ç–∞ –∞—à—É', '–∫–∞—Ä—Ç–∞ –∞–ª“ì—ã–º',
        '–¥–µ–ø–æ–∑–∏—Ç –∞—à', '–¥–µ–ø–æ–∑–∏—Ç –∞—à–∞–π—ã–Ω', '–¥–µ–ø–æ–∑–∏—Ç –∫–µ—Ä–µ–∫', '–¥–µ–ø–æ–∑–∏—Ç –∞—à—É', '–¥–µ–ø–æ–∑–∏—Ç –∞–ª“ì—ã–º',
        '–Ω–µ—Å–∏–µ –∞–ª', '–Ω–µ—Å–∏–µ –∞–ª–∞–π—ã–Ω', '–Ω–µ—Å–∏–µ –∫–µ—Ä–µ–∫', '–Ω–µ—Å–∏–µ –∞–ª—É', '–Ω–µ—Å–∏–µ –∞–ª“ì—ã–º',
        '–∫—Ä–µ–¥–∏—Ç –∞–ª', '–∫—Ä–µ–¥–∏—Ç –∞–ª–∞–π—ã–Ω', '–∫—Ä–µ–¥–∏—Ç –∫–µ—Ä–µ–∫', '–∫—Ä–µ–¥–∏—Ç –∞–ª—É', '–∫—Ä–µ–¥–∏—Ç –∞–ª“ì—ã–º',
        '—à–æ—Ç –∞—à', '—à–æ—Ç –∞—à–∞–π—ã–Ω', '—à–æ—Ç –∫–µ—Ä–µ–∫', '—à–æ—Ç –∞—à—É', '—à–æ—Ç –∞–ª“ì—ã–º',
        '”©—Ç—ñ–Ω—ñ–º –±–µ—Ä—É', '”©—Ç—ñ–Ω—ñ–º –∂–∞—Å–∞—É', '—Ä”ô—Å—ñ–º–¥–µ—É',
        '—Ç—ñ—Ä–∫–µ–ª—É', '—Ç—ñ—Ä–∫–µ–ª–≥—ñ–º –∫–µ–ª–µ–¥—ñ', '—Ç—ñ—Ä–∫–µ–ª–≥—ñ–º'
    ]

    ru_triggers = [
        '–æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç', '–æ—Ç–∫—Ä–æ—é –∫–∞—Ä—Ç', '—Ö–æ—á—É –∫–∞—Ä—Ç', '–Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç', '–∫–∞—Ä—Ç—É –æ—Ç–∫—Ä—ã—Ç—å',
        '–æ—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç', '–æ—Ç–∫—Ä–æ—é –¥–µ–ø–æ–∑–∏—Ç', '—Ö–æ—á—É –¥–µ–ø–æ–∑–∏—Ç', '–Ω—É–∂–µ–Ω –¥–µ–ø–æ–∑–∏—Ç', '–æ—Ñ–æ—Ä–º–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç', '–¥–µ–ø–æ–∑–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å',
        '–≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç', '–≤–æ–∑—å–º—É –∫—Ä–µ–¥–∏—Ç', '—Ö–æ—á—É –∫—Ä–µ–¥–∏—Ç', '–Ω—É–∂–µ–Ω –∫—Ä–µ–¥–∏—Ç', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç', '–∫—Ä–µ–¥–∏—Ç –≤–∑—è—Ç—å',
        '–≤–∑—è—Ç—å –∑–∞–µ–º', '–≤–∑—è—Ç—å –∑–∞–π–º', '–ø–æ–ª—É—á–∏—Ç—å –∑–∞–µ–º', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–µ–º',
        '–æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç', '–æ—Ç–∫—Ä–æ—é —Å—á–µ—Ç', '—Ö–æ—á—É —Å—á–µ—Ç', '–Ω—É–∂–µ–Ω —Å—á–µ—Ç', '—Å—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å',
        '–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É', '–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç',
        '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '—Å—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º',
        '–¥–∞–≤–∞–π –æ—Ç–∫—Ä–æ', '–¥–∞–≤–∞–π –æ—Ñ–æ—Ä–º', '–¥–∞–≤–∞–π –≤–æ–∑—å–º', '–¥–∞–≤–∞–π —Å–æ–∑–¥–∞',
        '–ø–æ–º–æ–≥–∏ –æ—Ç–∫—Ä—ã—Ç—å', '–ø–æ–º–æ–≥–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å', '–ø–æ–º–æ–≥–∏ –ø–æ–ª—É—á–∏—Ç—å'
    ]

    triggers = kk_triggers if lang == 'kk' else ru_triggers

    match_found = any(trigger in message_lower for trigger in triggers)

    if match_found:
        print(f"‚úì –ù–∞–π–¥–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{message_lower[:50]}...'")

    return match_found


def get_rag_response(user_id: str, message: str) -> dict:
    lang = 'ru'

    try:
        detected_lang = detect_language(message)
        print(f"üåç –û–±–Ω–∞—Ä—É–∂–µ–Ω —è–∑—ã–∫: {detected_lang}")

        lang = 'kk' if detected_lang == 'kk' else 'ru'
        print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –¥–ª—è: '{lang}'")
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")

        should_open_bank_site = detect_intent_to_open_product(message, lang)
        print(f"üîó –ù–∞–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç: {should_open_bank_site}")

        wants_analytics = any(keyword in message.lower() for keyword in [
            '–∞–Ω–∞–ª–∏–∑', '—Ä–∞—Å—Ö–æ–¥', '—Ç—Ä–∞—Ç', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–≥–¥–µ —è —Ç—Ä–∞—á—É',
            '–Ω–∞ —á—Ç–æ —É—Ö–æ–¥–∏—Ç', '—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞—á—É', '–º–æ–∏ —Ç—Ä–∞—Ç—ã'
        ])

        vector_database = vector_database_kk if lang == 'kk' else vector_database_ru

        print(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ RAG –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —è–∑—ã–∫–µ '{lang}'")

        user = db.users.find_one({"_id": ObjectId(user_id)})
        user_accounts = list(db.accounts.find({"userId": ObjectId(user_id)}))
        user_goals = list(db.goals.find({"userId": ObjectId(user_id)}))
        first_name = user.get('profile', {}).get('firstName', '–¥—Ä—É–≥') if user else '–¥—Ä—É–≥'
        print(f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name}")

        analytics_context = ""
        if wants_analytics:
            print("üìä –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤")
            analysis = analyze_spending_habits(user_id)
            if analysis:
                recommendations = generate_personalized_recommendations(user_id, analysis, user_goals)
                if lang == 'kk':
                    analytics_context = f"\n\n### –ö–õ–ò–ï–ù–¢–¢–Ü“¢ –®–´“í–´–°–¢–ê–†–´ –¢–ê–õ–î–ê–£–´:\n"
                    analytics_context += f"–ñ–∞–ª–ø—ã —à—ã“ì—ã—Å—Ç–∞—Ä: {analysis['total_expenses']:,.0f}‚Ç∏\n"
                    analytics_context += f"–ï“£ –∫”©–ø —à—ã“ì—ã–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Å—ã: {analysis['top_category']}\n"
                    if recommendations:
                        analytics_context += f"\n–ü–µ—Ä—Å–æ–Ω–∞–ª–¥—ã “±—Å—ã–Ω—ã—Å—Ç–∞—Ä:\n{recommendations}\n"
                else:
                    analytics_context = f"\n\n### –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–î–û–í –ö–õ–ò–ï–ù–¢–ê:\n"
                    analytics_context += f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {analysis['total_expenses']:,.0f}‚Ç∏\n"
                    analytics_context += f"–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['top_category']}\n"
                    if recommendations:
                        analytics_context += f"\n–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations}\n"

        astana_tz = pytz.timezone('Asia/Almaty')
        current_time = datetime.now(astana_tz)
        hour = current_time.hour

        if lang == 'kk':
            if 5 <= hour < 12:
                time_greeting = "“ö–∞–π—ã—Ä–ª—ã —Ç–∞“£"
            elif 12 <= hour < 17:
                time_greeting = "“ö–∞–π—ã—Ä–ª—ã –∫“Ø–Ω"
            elif 17 <= hour < 22:
                time_greeting = "“ö–∞–π—ã—Ä–ª—ã –∫–µ—à"
            else:
                time_greeting = "“ö–∞–π—ã—Ä–ª—ã —Ç“Ø–Ω"
            accounts_header = "\n–ö–ª–∏–µ–Ω—Ç—Ç—ñ“£ —à–æ—Ç—Ç–∞—Ä—ã:\n"
            goals_header = "\n–ö–ª–∏–µ–Ω—Ç—Ç—ñ“£ “õ–∞—Ä–∂—ã–ª—ã“õ –º–∞“õ—Å–∞—Ç—Ç–∞—Ä—ã:\n"
            no_data_msg = "–ö–ª–∏–µ–Ω—Ç—Ç–µ ”ô–ª—ñ —à–æ—Ç—Ç–∞—Ä –Ω–µ–º–µ—Å–µ –º–∞“õ—Å–∞—Ç—Ç–∞—Ä –∂–æ“õ.\n"
        else:
            if 5 <= hour < 12:
                time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
            elif 12 <= hour < 17:
                time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
            elif 17 <= hour < 22:
                time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            else:
                time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
            accounts_header = "\n–°—á–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞:\n"
            goals_header = "\n–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞:\n"
            no_data_msg = "–£ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤ –∏–ª–∏ —Ü–µ–ª–µ–π.\n"

        personal_context = f"### –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n–ò–º—è: {first_name}\n"
        if not user_accounts and not user_goals:
            personal_context += no_data_msg
        if user_accounts:
            personal_context += accounts_header
            for acc in user_accounts:
                balance_value = acc.get('balance')
                balance_str = str(balance_value) if isinstance(balance_value, Decimal128) else '0'
                personal_context += f"- '{acc.get('accountName', 'N/A')}' —à–æ—Ç—ã, –±–∞–ª–∞–Ω—Å: {balance_str} {acc.get('currency', 'KZT')}\n"
        if user_goals:
            personal_context += goals_header
            for goal in user_goals:
                current_str = str(goal.get('currentAmount')) if isinstance(goal.get('currentAmount'),
                                                                           Decimal128) else '0'
                target_str = str(goal.get('targetAmount')) if isinstance(goal.get('targetAmount'), Decimal128) else '0'
                personal_context += f"- '{goal.get('goalName', 'N/A')}' –º–∞“õ—Å–∞—Ç—ã. –ñ–∏–Ω–∞–ª“ì–∞–Ω: {current_str} / {target_str} KZT\n"
        personal_context += "###\n\n"

        personal_context += analytics_context

        chat_history = list(db.chat_history.find({"userId": ObjectId(user_id)}).sort("timestamp", -1).limit(3))
        chat_history.reverse()
        is_first_message = len(chat_history) == 0


        history_context = ""
        if chat_history:
            history_context = "### –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
            for msg in chat_history:
                role = "–ö–ª–∏–µ–Ω—Ç" if msg.get('role') == 'user' else "–ê–º–∏—Ä"
                history_context += f"{role}: {msg.get('message', '')}\n"
            history_context += "###\n\n"

        print(f"üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π ('{lang}')...")
        question_vector = get_embedding(message)
        chunks_with_sources = find_most_relevant_chunk(np.array(question_vector), vector_db=vector_database, top_k=2)

        context_str = "–ë—ñ–ª—ñ–º –±–∞–∑–∞—Å—ã–Ω–¥–∞ –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ“õ." if lang == 'kk' else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
        if chunks_with_sources:
            context_chunks = [item[0] for item in chunks_with_sources]
            context_str = "\n\n".join(context_chunks)
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(chunks_with_sources)}")

        if should_open_bank_site:
            if lang == 'kk':
                product_instruction = "\n\n–ú–ê“¢–´–ó–î–´: –ö–ª–∏–µ–Ω—Ç ”©–Ω—ñ–º –∞—à“õ—ã—Å—ã –∫–µ–ª–µ–¥—ñ. –û“ì–∞–Ω ”©–Ω—ñ–º —Ç—É—Ä–∞–ª—ã “õ—ã—Å“õ–∞—à–∞ –∞–π—Ç—ã–ø, —Å–æ–¥–∞–Ω –∫–µ–π—ñ–Ω: '–ú–µ–Ω —Å—ñ–∑–¥—ñ Zaman Bank —Å–∞–π—Ç—ã–Ω–∞ –±–∞“ì—ã—Ç—Ç–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω, –æ–Ω–¥–∞ —Å—ñ–∑ ”©—Ç—ñ–Ω—ñ–º –∂–∞—Å–∞–π –∞–ª–∞—Å—ã–∑!' –¥–µ–ø –∂–∞–∑."
            else:
                product_instruction = "\n\n–í–ê–ñ–ù–û: –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –†–∞—Å—Å–∫–∞–∂–∏ –µ–º—É –∫—Ä–∞—Ç–∫–æ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –∞ –∑–∞—Ç–µ–º —Å–∫–∞–∂–∏: '–°–µ–π—á–∞—Å —è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—é –≤–∞—Å –Ω–∞ —Å–∞–π—Ç Zaman Bank, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É!'"
        else:
            product_instruction = ""

        if lang == 'kk':
            system_prompt = f"""–°–µ–Ω—ñ“£ —Ä”©–ª—ñ“£: –°–µ–Ω ‚Äî ”ò–º—ñ—Ä, Zaman Bank-—Ç—ñ“£ –∂–µ–∫–µ “õ–∞—Ä–∂—ã —Ç—ñ–ª—ñ–º–≥–µ—Ä—ñ –∂”ô–Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ “õ–æ–ª–¥–∞—É—à—ã.

–ú–ê“¢–´–ó–î–´: –ñ–∞—É–∞–ø—Ç—ã –¢”ò–£–ï–õ–°–Ü–ó “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –±–µ—Ä—É –∫–µ—Ä–µ–∫. –ï—à–±—ñ—Ä –æ—Ä—ã—Å —Å”©–∑–¥–µ—Ä—ñ–Ω “õ–æ–ª–¥–∞–Ω–±–∞!

–°–µ–Ω—ñ“£ –º–∞“õ—Å–∞—Ç—ã“£:
1. –ö–ª–∏–µ–Ω—Ç—Ç—ñ“£ “õ–∞—Ä–∂—ã–ª—ã“õ –º–∞“õ—Å–∞—Ç—Ç–∞—Ä—ã–Ω–∞ –∂–µ—Ç—É–≥–µ –∫”©–º–µ–∫—Ç–µ—Å—É
2. –°—Ç—Ä–µ—Å—Å–ø–µ–Ω –∫“Ø—Ä–µ—Å—É “Ø—à—ñ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–ª–∞—Ä “±—Å—ã–Ω—É (—Ç–µ–∫ —Å–∞—Ç—ã–ø –∞–ª—É –µ–º–µ—Å!)
3. –î–µ–Ω—Å–∞—É–ª—ã“õ“õ–∞ —à—ã“ì—ã–Ω–¥–∞—Ä —Ç—É—Ä–∞–ª—ã –µ—Å–∫–µ—Ä—Ç—É
4. –ü–∞–π–¥–∞–ª—ã ”ô–¥–µ—Ç—Ç–µ—Ä–¥—ñ –¥–∞–º—ã—Ç—É“ì–∞ —ã–Ω—Ç–∞–ª–∞–Ω–¥—ã—Ä—É

“ö–∞—Ä—ã–º-“õ–∞—Ç—ã–Ω–∞—Å —Å—Ç–∏–ª—ñ“£:
- –ñ—ã–ª—ã, –∞–¥–∞–º–≥–µ—Ä—à—ñ–ª—ñ–∫–ø–µ–Ω —Å”©–π–ª–µ, –¥–æ—Å—ã“£–¥–∞–π.
- –ö–ª–∏–µ–Ω—Ç–∫–µ "—Å—ñ–∑" –¥–µ–ø “õ“±—Ä–º–µ—Ç–ø–µ–Ω –∂“Ø–≥—ñ–Ω.
- –¢”ò–£–ï–õ–°–Ü–ó “õ–∞—Ä–∞–ø–∞–π—ã–º, —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω “õ–æ–ª–¥–∞–Ω.

–ü–°–ò–•–û–õ–û–ì–ò–Ø–õ–´“ö “ö–û–õ–î–ê–£:
- –ï–≥–µ—Ä –∫–ª–∏–µ–Ω—Ç —Ç“Ø–Ω–¥–µ (23:00-06:00) –∫”©–ø —à—ã“ì—ã–Ω–¥–∞–π—Ç—ã–Ω –±–æ–ª—Å–∞, –∏–º–ø—É–ª—å—Å–∏–≤—Ç—ñ —Å–∞—Ç—ã–ø –∞–ª—É–ª–∞—Ä —Ç—É—Ä–∞–ª—ã –µ—Å–∫–µ—Ä—Ç
- –°—Ç—Ä–µ—Å—Å–ø–µ–Ω –∫“Ø—Ä–µ—Å—É–¥—ñ“£ —Ç–∏—ñ–º–¥—ñ –∂–æ–ª–¥–∞—Ä—ã–Ω “±—Å—ã–Ω: —Å–µ—Ä—É–µ–Ω–¥–µ—É, –º–µ–¥–∏—Ç–∞—Ü–∏—è, –¥–æ—Å“õ–∞ “õ–æ“£—ã—Ä–∞—É —à–∞–ª—É, —Å–ø–æ—Ä—Ç
- –ö–ª–∏–µ–Ω—Ç—Ç—ñ“£ –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ–Ω –∞—Ç–∞–ø ”©—Ç –∂”ô–Ω–µ –º–∞–¥–∞“õ—Ç–∞

“ö–∞–ª–∞–π –∂–∞—É–∞–ø –±–µ—Ä—É –∫–µ—Ä–µ–∫:
‚úì –ñ–µ–∫–µ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –ø–∞–π–¥–∞–ª–∞–Ω
‚úì –ë—ñ–ª—ñ–º –±–∞–∑–∞—Å—ã–Ω–∞ —Å“Ø–π–µ–Ω
‚úì –ö“Ø—Ä–¥–µ–ª—ñ —Ç–µ—Ä–º–∏–Ω–¥–µ—Ä–¥—ñ “õ–∞—Ä–∞–ø–∞–π—ã–º —Å”©–∑–±–µ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä
”ò—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–¥–∞ —Å”ô–ª–µ–º–¥–µ—Å–ø–µ! –°”ô–ª–µ–º–¥–µ—Å—É —Ç–µ–∫ –∞–ª“ì–∞—à“õ—ã –±–∞–π–ª–∞–Ω—ã—Å—Ç–∞ “ì–∞–Ω–∞.
‚úó –ë—ñ–ª—ñ–º –±–∞–∑–∞—Å—ã–Ω–¥–∞ –∂–æ“õ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã –æ–π–¥–∞–Ω —à—ã“ì–∞—Ä–º–∞
‚úó –ï–®–ë–Ü–† ** –Ω–µ–º–µ—Å–µ * –±–µ–ª–≥—ñ–ª–µ—Ä—ñ–Ω “õ–æ–ª–¥–∞–Ω–±–∞!
‚úó –¢–µ–∫ “õ–∞—Ä–∞–ø–∞–π—ã–º –º”ô—Ç—ñ–Ω–º–µ–Ω –∂–∞—É–∞–ø –±–µ—Ä!{product_instruction}"""
            user_prompt = f"{personal_context}{history_context}–ë–Ü–õ–Ü–ú –ë–ê–ó–ê–°–´–ù–ê–ù –ê–õ–´–ù“í–ê–ù –ö–û–ù–¢–ï–ö–°–¢:\n{context_str}\n\n–ö–õ–ò–ï–ù–¢–¢–Ü“¢ –ê“í–´–ú–î–ê“í–´ –°“∞–†–ê“í–´:\n{message}\n\n–ù“∞–°“ö–ê–£: –ñ–∞—É–∞–ø—Ç—ã “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –±–µ—Ä."
        else:
            system_prompt = f"""–¢–≤–æ—è —Ä–æ–ª—å: –¢—ã ‚Äî –ê–º–∏—Ä, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç Zaman Bank.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!

–¢–≤–æ–∏ —Ü–µ–ª–∏:
1. –ü–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
2. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å—Ç—Ä–µ—Å—Å-—à–æ–ø–∏–Ω–≥—É –∏ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–º —Ç—Ä–∞—Ç–∞–º
3. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ –≤—Ä–µ–¥–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö
4. –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫

–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –û–±—â–∞–π—Å—è —Ç–µ–ø–ª–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –¥—Ä—É–≥.
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ "–≤—ã".
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π, –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫.

–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê:
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ç—Ä–∞—Ç–∏—Ç –Ω–æ—á—å—é (23:00-06:00), –º—è–≥–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –æ–± –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö
- –ü—Ä–µ–¥–ª–æ–∂–∏ –∑–¥–æ—Ä–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –±–æ—Ä—å–±—ã —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º: –ø—Ä–æ–≥—É–ª–∫–∏, –º–µ–¥–∏—Ç–∞—Ü–∏—è, –∑–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É, —Å–ø–æ—Ä—Ç, —Ö–æ–±–±–∏
- –û—Ç–º–µ—á–∞–π —É—Å–ø–µ—Ö–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ö–≤–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –≤—Ä–µ–¥–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É (–º–Ω–æ–≥–æ —Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è), –¥–µ–ª–∏–∫–∞—Ç–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É

–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:
‚úì –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.
‚úì –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
‚úì –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
‚úì –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ.
‚úó –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
‚úó –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π ** –∏–ª–∏ * —Å–∏–º–≤–æ–ª—ã!
‚úó –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º!{product_instruction}"""
            user_prompt = f"{personal_context}{history_context}–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:\n{context_str}\n\n–¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê:\n{message}\n\n–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

        print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI...")
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=600,
            temperature=0.7
        )
        bot_reply = response.choices[0].message.content
        bot_reply = bot_reply.replace('**', '').replace('*', '')
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI")

        db.chat_history.insert_one({
            "userId": ObjectId(user_id),
            "role": "user",
            "message": message,
            "timestamp": datetime.utcnow()
        })
        db.chat_history.insert_one({
            "userId": ObjectId(user_id),
            "role": "assistant",
            "message": bot_reply,
            "timestamp": datetime.utcnow()
        })
        print("‚úì –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        return {
            "reply": bot_reply,
            "open_bank_site": should_open_bank_site,
            "bank_url": "https://www.zamanbank.kz/" if should_open_bank_site else None
        }

    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ get_rag_response: {e}")
        import traceback
        traceback.print_exc()

        error_msg = "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑—à—ñ." if lang == 'kk' else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        return {
            "reply": error_msg,
            "open_bank_site": False,
            "bank_url": None
        }


def categorize_transaction(description: str) -> str:
    categories = {
        '–ü—Ä–æ–¥—É–∫—Ç—ã': ['–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', 'grocery', '–º–µ–≥–∞–º–∞—Ä—Ç', 'small', '–ø—Ä–æ–¥—É–∫—Ç—ã'],
        '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['–±–µ–Ω–∑–∏–Ω', '–∑–∞–ø—Ä–∞–≤–∫–∞', '—Ç–∞–∫—Å–∏', '—è–Ω–¥–µ–∫—Å', 'uber', '–∞–≤—Ç–æ–±—É—Å', '–º–µ—Ç—Ä–æ'],
        '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['–∫–∏–Ω–æ', '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–±–∞—Ä', '–∫–ª—É–±', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–∏–≥—Ä—ã'],
        '–û–¥–µ–∂–¥–∞': ['zara', 'h&m', '–æ–¥–µ–∂–¥–∞', '–æ–±—É–≤—å', '–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã'],
        '–ó–¥–æ—Ä–æ–≤—å–µ': ['–∞–ø—Ç–µ–∫–∞', '–∫–ª–∏–Ω–∏–∫–∞', '–±–æ–ª—å–Ω–∏—Ü–∞', '–≤—Ä–∞—á', '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞'],
        '–°–≤—è–∑—å': ['beeline', 'kcell', 'altel', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω'],
        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '–∫–Ω–∏–≥–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç'],
        '–ü–µ—Ä–µ–≤–æ–¥—ã': ['–ø–µ—Ä–µ–≤–æ–¥', 'transfer', '–¥—Ä—É–≥—É', '—Ä–æ–¥–∏—Ç–µ–ª—è–º']
    }

    desc_lower = description.lower()
    for category, keywords in categories.items():
        if any(keyword in desc_lower for keyword in keywords):
            return category
    return '–ü—Ä–æ—á–µ–µ'


def analyze_spending_habits(user_id: str) -> dict:
    try:
        print(f"üìä –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

        one_month_ago = datetime.utcnow() - timedelta(days=30)

        transactions = list(db.transactions.find({
            "userId": ObjectId(user_id),
            "createdAt": {"$gte": one_month_ago},
            "type": "expense"
        }))

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")

        if len(transactions) == 0:
            print("‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None

        category_totals = {}
        night_spending = 0
        total_expenses = 0

        for tx in transactions:
            amount_field = tx.get('amount')

            if amount_field is None:
                print(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±–µ–∑ amount: {tx.get('_id')}")
                continue

            if isinstance(amount_field, Decimal128):
                amount = float(amount_field.to_decimal())
            elif isinstance(amount_field, dict) and '$numberDecimal' in amount_field:
                amount = float(amount_field['$numberDecimal'])
            elif isinstance(amount_field, (int, float)):
                amount = float(amount_field)
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç amount: {type(amount_field)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {amount_field}")
                continue

            total_expenses += amount

            category = categorize_transaction(tx.get('description', ''))
            category_totals[category] = category_totals.get(category, 0) + amount

            tx_date = tx.get('createdAt')
            if tx_date and isinstance(tx_date, datetime):
                tx_hour = tx_date.hour
                if tx_hour >= 23 or tx_hour < 6:
                    night_spending += amount

        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses:,.0f}‚Ç∏")
        print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_totals}")

        if category_totals:
            top_category = max(category_totals.items(), key=lambda x: x[1])
        else:
            top_category = ('–ü—Ä–æ—á–µ–µ', 0)

        result = {
            "total_expenses": total_expenses,
            "categories": category_totals,
            "top_category": top_category[0],
            "top_category_amount": top_category[1],
            "night_spending": night_spending,
            "night_spending_percentage": (night_spending / total_expenses * 100) if total_expenses > 0 else 0
        }

        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_spending_habits: {e}")
        import traceback
        traceback.print_exc()
        return None


def generate_personalized_recommendations(user_id: str, analysis: dict, user_goals: list) -> str:
    if not analysis:
        return ""

    recommendations = []

    if analysis['top_category_amount'] > 50000:
        recommendations.append(
            f"üí° –í—ã —Ç—Ä–∞—Ç–∏—Ç–µ {analysis['top_category_amount']:,.0f}‚Ç∏ –≤ –º–µ—Å—è—Ü –Ω–∞ {analysis['top_category']}. "
            f"–ï—Å–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ 20%, –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å {analysis['top_category_amount'] * 0.2:,.0f}‚Ç∏!"
        )

    if analysis['night_spending_percentage'] > 15:
        recommendations.append(
            f"‚ö†Ô∏è {analysis['night_spending_percentage']:.0f}% –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–æ—á—å—é. "
            f"–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–º –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –ø–æ–¥–æ–∂–¥–∞—Ç—å 24 —á–∞—Å–∞ "
            f"–∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —à–æ–ø–∏–Ω–≥ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É, –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –∑–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É."
        )

    if user_goals and analysis['total_expenses'] > 0:
        active_goal = next((g for g in user_goals if g.get('status') == 'active'), None)
        if active_goal:
            target_field = active_goal.get('targetAmount')
            current_field = active_goal.get('currentAmount')

            if isinstance(target_field, Decimal128):
                target = float(target_field.to_decimal())
            elif isinstance(target_field, dict) and '$numberDecimal' in target_field:
                target = float(target_field['$numberDecimal'])
            else:
                target = float(target_field) if target_field else 0

            if isinstance(current_field, Decimal128):
                current = float(current_field.to_decimal())
            elif isinstance(current_field, dict) and '$numberDecimal' in current_field:
                current = float(current_field['$numberDecimal'])
            else:
                current = float(current_field) if current_field else 0

            remaining = target - current

            if remaining > 0:
                monthly_potential_savings = analysis['total_expenses'] * 0.15
                months_to_goal = remaining / monthly_potential_savings if monthly_potential_savings > 0 else 999

                recommendations.append(
                    f"üéØ –î–æ –≤–∞—à–µ–π —Ü–µ–ª–∏ '{active_goal.get('goalName')}' –æ—Å—Ç–∞–ª–æ—Å—å {remaining:,.0f}‚Ç∏. "
                    f"–ï—Å–ª–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å {monthly_potential_savings:,.0f}‚Ç∏ –≤ –º–µ—Å—è—Ü (15% –æ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤), "
                    f"–¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Ü–µ–ª–∏ –∑–∞ {int(months_to_goal)} –º–µ—Å—è—Ü–µ–≤!"
                )

    return "\n\n".join(recommendations) if recommendations else ""


@app.route('/api/transactions', methods=['GET'])
def get_transactions():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        user_id = session['user_id']
        period = request.args.get('period', 'month')

        now = datetime.utcnow()
        if period == 'week':
            start_date = now - timedelta(days=7)
        elif period == 'year':
            start_date = now - timedelta(days=365)
        else:
            start_date = now - timedelta(days=30)

        transactions = list(db.transactions.find({
            "userId": ObjectId(user_id),
            "createdAt": {"$gte": start_date}
        }).sort("createdAt", -1))

        return dumps(transactions), 200, {'Content-Type': 'application/json'}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return jsonify({"error": str(e)}), 500



@app.route('/api/analytics', methods=['GET'])
def get_analytics():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        user_id = session['user_id']
        print(f"üîç –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

        analysis = analyze_spending_habits(user_id)

        if not analysis:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return jsonify({"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}), 400

        user_goals = list(db.goals.find({"userId": ObjectId(user_id)}))

        recommendations = generate_personalized_recommendations(user_id, analysis, user_goals)

        response_data = {
            "analysis": {
                "total_expenses": analysis['total_expenses'],
                "categories": analysis['categories'],
                "top_category": analysis['top_category'],
                "night_spending_percentage": analysis['night_spending_percentage']
            },
            "recommendations": recommendations
        }

        print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞. –†–∞—Å—Ö–æ–¥—ã: {analysis['total_expenses']:,.0f}‚Ç∏")
        return jsonify(response_data), 200

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /api/analytics: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

@app.route('/api/transactions', methods=['POST'])
def add_transaction():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        user_id = session['user_id']
        data = request.get_json()

        new_transaction = {
            "userId": ObjectId(user_id),
            "type": data.get('type', 'expense'),
            "amount": Decimal128(str(data['amount'])),
            "description": data['description'],
            "category": categorize_transaction(data['description']),
            "createdAt": datetime.utcnow()
        }

        result = db.transactions.insert_one(new_transaction)

        return jsonify({
            "success": True,
            "transactionId": str(result.inserted_id)
        }), 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/api/generate-demo-data', methods=['POST'])
def generate_demo_data():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        user_id = session['user_id']
        print(f"üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

        delete_result = db.transactions.delete_many({"userId": ObjectId(user_id)})
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {delete_result.deleted_count}")

        demo_transactions = [
            {"desc": "–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤ Small", "amount": 15000, "days_ago": 1},
            {"desc": "–Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏", "amount": 2500, "days_ago": 2},
            {"desc": "–ö–æ—Ñ–µ–π–Ω—è Starbucks", "amount": 3000, "days_ago": 2},
            {"desc": "–ó–∞–ø—Ä–∞–≤–∫–∞ KazMunayGas", "amount": 12000, "days_ago": 3},
            {"desc": "–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã Zara", "amount": 35000, "days_ago": 4, "hour": 23},
            {"desc": "–†–µ—Å—Ç–æ—Ä–∞–Ω Burger King", "amount": 4500, "days_ago": 5},
            {"desc": "–ê–ø—Ç–µ–∫–∞", "amount": 5000, "days_ago": 6},
            {"desc": "Beeline –æ–ø–ª–∞—Ç–∞", "amount": 3500, "days_ago": 7},
            {"desc": "–ö–∏–Ω–æ Chaplin", "amount": 4000, "days_ago": 8},
            {"desc": "–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "amount": 18000, "days_ago": 9},
            {"desc": "Uber –ø–æ–µ–∑–¥–∫–∞", "amount": 1800, "days_ago": 10},
            {"desc": "–ö–Ω–∏–∂–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", "amount": 8000, "days_ago": 11},
            {"desc": "–ö–∞—Ñ–µ Coffee Room", "amount": 2500, "days_ago": 12, "hour": 1},
            {"desc": "–ó–∞–ø—Ä–∞–≤–∫–∞", "amount": 11000, "days_ago": 13},
            {"desc": "–ú–∞–≥–∞–∑–∏–Ω H&M", "amount": 28000, "days_ago": 14},
            {"desc": "–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã Chocofood", "amount": 5500, "days_ago": 15},
            {"desc": "–ê–ø—Ç–µ–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "amount": 7000, "days_ago": 16},
            {"desc": "–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "amount": 16000, "days_ago": 17},
            {"desc": "–¢–∞–∫—Å–∏", "amount": 2000, "days_ago": 18},
            {"desc": "–ö–æ—Ñ–µ–π–Ω—è", "amount": 2800, "days_ago": 19},
            {"desc": "–û–Ω–ª–∞–π–Ω –ø–æ–∫—É–ø–∫–∏ Wildberries", "amount": 42000, "days_ago": 20, "hour": 0},
        ]

        transactions_to_insert = []
        for tx in demo_transactions:
            tx_date = datetime.utcnow() - timedelta(days=tx['days_ago'])
            if 'hour' in tx:
                tx_date = tx_date.replace(hour=tx['hour'])

            transactions_to_insert.append({
                "userId": ObjectId(user_id),
                "type": "expense",
                "amount": Decimal128(str(tx['amount'])),
                "description": tx['desc'],
                "category": categorize_transaction(tx['desc']),
                "createdAt": tx_date
            })

        result = db.transactions.insert_many(transactions_to_insert)
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(result.inserted_ids)}")

        return jsonify({
            "success": True,
            "message": f"–°–æ–∑–¥–∞–Ω–æ {len(transactions_to_insert)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            "count": len(transactions_to_insert)
        }), 200

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


@app.route('/')
def home():
    if 'user_id' in session:
        return redirect(url_for('dashboard'))
    return render_template('login.html')


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        data = request.form
        required_fields = ['firstName', 'lastName', 'email', 'password']
        if not all(field in data and data[field] for field in required_fields):
            return render_template('register.html', error="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")

        email = data['email'].lower()
        if db.users.find_one({"username": email}):
            return render_template('register.html', error="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        hashed_pw = bcrypt.hashpw(data['password'].encode('utf-8'), bcrypt.gensalt())
        new_user = {
            "username": email,
            "password": hashed_pw,
            "profile": {
                "firstName": data['firstName'],
                "lastName": data['lastName'],
                "currency": "KZT"
            },
            "preferences": {"notifications": {"email": True, "push": False}},
            "createdAt": datetime.utcnow()
        }
        db.users.insert_one(new_user)
        return redirect(url_for('login'))
    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        data = request.form
        if 'email' not in data:
            return "Bad Request: Email field is missing.", 400

        email = data['email'].lower()
        user = db.users.find_one({"username": email})

        if user and 'password' in user and bcrypt.checkpw(data['password'].encode('utf-8'), user['password']):
            if 'profile' in user:
                session['user_id'] = str(user['_id'])
                session['username'] = user['profile']['firstName']
                return redirect(url_for('dashboard'))
            else:
                return render_template('login.html', error="–ê–∫–∫–∞—É–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.")
        return render_template('login.html', error="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
    return render_template('login.html')


@app.route('/logout')
def logout():
    session.pop('user_id', None)
    session.pop('username', None)
    return redirect(url_for('home'))


@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('dashboard.html', username=session.get('username'))


@app.route('/chat', methods=['POST'])
def chat():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    user_id = session['user_id']
    data = request.get_json()
    user_message = data.get("message", "")

    if not user_message:
        return jsonify({
            "reply": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.",
            "open_bank_site": False,
            "bank_url": None
        })

    print(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")

    try:
        response_data = get_rag_response(user_id, user_message)

        if not isinstance(response_data, dict):
            print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: get_rag_response –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(response_data)}")
            response_data = {
                "reply": str(response_data),
                "open_bank_site": False,
                "bank_url": None
            }

        print(f"‚úì –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response_data.get('reply', '')[:50]}...")

        if response_data.get('open_bank_site'):
            print(f"üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: {response_data.get('bank_url')}")

        return jsonify(response_data)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ /chat: {e}")
        import traceback
        traceback.print_exc()

        return jsonify({
            "reply": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "open_bank_site": False,
            "bank_url": None
        }), 200


@app.route('/transcribe', methods=['POST'])
def transcribe_audio():
    if 'audio' not in request.files: return jsonify({"error": "–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400
    audio_file = request.files['audio']
    temp_audio_path = "temp_audio_file.webm"
    audio_file.save(temp_audio_path)
    try:
        with open(temp_audio_path, "rb") as f:
            transcript = openai_client.audio.transcriptions.create(model="whisper-1", file=f)
        return jsonify({'transcribed_text': transcript.text})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: {e}")
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"}), 500
    finally:
        if os.path.exists(temp_audio_path):
            os.remove(temp_audio_path)


@app.route('/api/accounts')
def get_accounts():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        user_id = session['user_id']
        print(f"üí∞ –ó–∞–ø—Ä–æ—Å —Å—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

        user_accounts = list(db.accounts.find({"userId": ObjectId(user_id)}))
        print(f"‚úì –ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(user_accounts)}")

        return dumps(user_accounts), 200, {'Content-Type': 'application/json'}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/api/goals', methods=['GET'])
def get_goals():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        user_id = session['user_id']
        print(f"üìä –ó–∞–ø—Ä–æ—Å —Ü–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

        user_goals = list(db.goals.find({"userId": ObjectId(user_id)}))
        print(f"‚úì –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π: {len(user_goals)}")

        return dumps(user_goals), 200, {'Content-Type': 'application/json'}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/api/goals', methods=['POST'])
def add_goal():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    user_id = session['user_id']
    data = request.get_json()

    print(f"üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏: {data}")

    if not data or not data.get('goalName') or not data.get('targetAmount'):
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"}), 400

    try:
        new_goal = {
            "userId": ObjectId(user_id),
            "goalType": data.get('goalType', 'other'),
            "goalName": data['goalName'],
            "targetAmount": Decimal128(str(data['targetAmount'])),
            "currentAmount": Decimal128("0"),
            "status": "active",
            "createdAt": datetime.utcnow()
        }

        result = db.goals.insert_one(new_goal)
        print(f"‚úì –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {result.inserted_id}")

        return jsonify({
            "success": True,
            "message": "–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            "goalId": str(result.inserted_id)
        }), 200
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    load_vector_databases()
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)