"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python add_test_data.py
"""

import os
import certifi
from dotenv import load_dotenv
from pymongo import MongoClient
from bson import ObjectId
from bson.decimal128 import Decimal128
from datetime import datetime

load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGO_URI = os.getenv("MONGO_URI")
ca = certifi.where()
mongo_client = MongoClient(MONGO_URI, tlsCAFile=ca)
db = mongo_client["E-commerce"]

print("\n" + "=" * 60)
print("–î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
print("=" * 60)

# –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user = db.users.find_one(sort=[("createdAt", -1)])

if not user:
    print("\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
    exit()

user_id = user['_id']
user_name = user['profile']['firstName']

print(f"\nüë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
print(f"   ID: {user_id}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
existing_accounts = list(db.accounts.find({"userId": user_id}))
existing_goals = list(db.goals.find({"userId": user_id}))

print(f"\nüìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
print(f"   –°—á–µ—Ç–æ–≤: {len(existing_accounts)}")
print(f"   –¶–µ–ª–µ–π: {len(existing_goals)}")

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—á–µ—Ç–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if len(existing_accounts) == 0:
    print("\nüí∞ –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—á–µ—Ç–∞...")

    test_accounts = [
        {
            "userId": user_id,
            "accountName": "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç",
            "accountType": "checking",
            "balance": Decimal128("150000.50"),
            "currency": "KZT",
            "isActive": True,
            "createdAt": datetime.utcnow()
        },
        {
            "userId": user_id,
            "accountName": "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç",
            "accountType": "savings",
            "balance": Decimal128("75000.00"),
            "currency": "KZT",
            "isActive": True,
            "createdAt": datetime.utcnow()
        }
    ]

    result = db.accounts.insert_many(test_accounts)
    print(f"   ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(result.inserted_ids)}")
else:
    print("\n   ‚Ñπ –°—á–µ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é...")

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–ª–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if len(existing_goals) < 2:
    print("\nüéØ –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–ª–∏...")

    test_goals = [
        {
            "userId": user_id,
            "goalName": "–û—Ç–ø—É—Å–∫ –≤ –¢—É—Ä—Ü–∏–∏",
            "targetAmount": Decimal128("500000"),
            "currentAmount": Decimal128("125000"),
            "status": "active",
            "createdAt": datetime.utcnow()
        },
        {
            "userId": user_id,
            "goalName": "–ù–æ–≤—ã–π –Ω–æ—É—Ç–±—É–∫",
            "targetAmount": Decimal128("300000"),
            "currentAmount": Decimal128("50000"),
            "status": "active",
            "createdAt": datetime.utcnow()
        }
    ]

    result = db.goals.insert_many(test_goals)
    print(f"   ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ —Ü–µ–ª–µ–π: {len(result.inserted_ids)}")
else:
    print("\n   ‚Ñπ –¶–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é...")

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\n" + "=" * 60)
print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
print("=" * 60)

final_accounts = list(db.accounts.find({"userId": user_id}))
final_goals = list(db.goals.find({"userId": user_id}))

print(f"\nüìä –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_name}:")
print(f"   üí∞ –°—á–µ—Ç–æ–≤: {len(final_accounts)}")
for acc in final_accounts:
    balance = str(acc['balance'])
    print(f"      - {acc['accountName']}: {balance} {acc['currency']}")

print(f"\n   üéØ –¶–µ–ª–µ–π: {len(final_goals)}")
for goal in final_goals:
    current = str(goal['currentAmount'])
    target = str(goal['targetAmount'])
    progress = (float(current) / float(target)) * 100
    print(f"      - {goal['goalName']}: {progress:.1f}% ({current}/{target} KZT)")

print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n")